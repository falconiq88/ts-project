import graphqlFields from 'graphql-fields';
import { writeFileSync } from 'fs';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/**
 * Convert `info` to select object accepted by `prisma client`.
 * @param info - GraphQLResolveInfo.
 * @example
 * // Graphql query
 * {
 *    findManyUser{
 *      id
 *      posts(where: { title: { contains: "a" } }, first: 10) {
 *        id
 *        comments{
 *          id
 *        }
 *      }
 *    }
 * }
 * // convert to
 * {
 *  select: {
 *    id: true,
 *    posts: {
 *      select: { id: true, comments: { select: { id: true } } },
 *      where: { title: { contains: "a" } },
 *      first: 10
 *    }
 *  }
 * }
 *
 * // Use
 *
 * const select = new PrismaSelect(info);
 *
 * prisma.user.findMany({
 *  ...args,
 *  ...select.value,
 * })
 *
 **/

var PrismaSelect = /*#__PURE__*/function () {
  function PrismaSelect(info, options) {
    this.info = info;
    this.options = options;
    this.availableArgs = ['where', 'orderBy', 'skip', 'cursor', 'take'];
    this.allowedProps = ['_count'];
    this.isAggregate = false;
  }

  PrismaSelect.getModelMap = function getModelMap(docs, name) {
    var value = docs == null ? void 0 : docs.match(/@PrismaSelect.map\(\[(.*?)\]\)/);

    if (value && name) {
      var asArray = value[1].replace(/ /g, '').split(',').filter(function (v) {
        return v;
      });
      return asArray.includes(name);
    }

    return false;
  };

  var _proto = PrismaSelect.prototype;

  _proto.model = function model(name) {
    return this.dataModel.find(function (item) {
      return item.name === name || PrismaSelect.getModelMap(item.documentation, name);
    });
  };

  _proto.field = function field(name, model) {
    return model == null ? void 0 : model.fields.find(function (item) {
      return item.name === name;
    });
  };

  PrismaSelect.isObject = function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
  };

  PrismaSelect.mergeDeep = function mergeDeep(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }

    if (!sources.length) return target;
    var source = sources.shift();

    if (PrismaSelect.isObject(target) && PrismaSelect.isObject(source)) {
      for (var key in source) {
        if (PrismaSelect.isObject(source[key])) {
          var _Object$assign;

          if (!target[key]) Object.assign(target, (_Object$assign = {}, _Object$assign[key] = {}, _Object$assign));
          PrismaSelect.mergeDeep(target[key], source[key]);
        } else {
          var _Object$assign2;

          Object.assign(target, (_Object$assign2 = {}, _Object$assign2[key] = source[key], _Object$assign2));
        }
      }
    }

    return PrismaSelect.mergeDeep.apply(PrismaSelect, [target].concat(sources));
  }
  /**
   * Get nested value from select object.
   * @param field - name of field in select object.
   * @param filterBy - Model name as you have in schema.prisma file.
   * @param mergeObject
   * @example
   * // Graphql query
   * {
   *    findManyUser{
   *      id
   *      posts{
   *        id
   *        comments{
   *          id
   *        }
   *      }
   *    }
   * }
   *
   * // when you need to get more nested fields just add `.`
   * PrismaSelect.valueOf('posts.comments', 'Comment');
   * // return
   * { select: { id: true } }
   *
   * PrismaSelect.valueOf('posts', 'Post');
   *
   * // return
   * { select: { id: true, comments: { select: { id: true } } } }
   *
   **/
  ;

  _proto.valueOf = function valueOf(field, filterBy, mergeObject) {
    if (mergeObject === void 0) {
      mergeObject = {};
    }

    var splitItem = field.split('.');
    var newValue = this.getSelect(this.fields);

    for (var _iterator = _createForOfIteratorHelperLoose(splitItem), _step; !(_step = _iterator()).done;) {
      var _field = _step.value;

      if (this.isAggregate && newValue.hasOwnProperty(_field)) {
        newValue = newValue[_field];
      } else if (!this.isAggregate && newValue.hasOwnProperty('select') && newValue.select.hasOwnProperty(_field)) {
        newValue = newValue.select[_field];
      } else {
        return {};
      }
    }

    return filterBy ? PrismaSelect.mergeDeep(this.filterBy(filterBy, newValue), mergeObject) : newValue;
  }
  /**
   * Work with this method if your GraphQL type name not like Schema model name.
   * @param modelName - Model name as you have in schema.prisma file.
   * @example
   * // normal call
   * const select = new PrismaSelect(info).value
   *
   * // With filter will filter select object with provided schema model name
   * const select = new PrismaSelect(info).valueWithFilter('User');
   *
   **/
  ;

  _proto.valueWithFilter = function valueWithFilter(modelName) {
    return this.filterBy(modelName, this.getSelect(this.fields));
  };

  _proto.filterBy = function filterBy(modelName, selectObject) {
    var _this = this;

    var model = this.model(modelName);

    if (model && typeof selectObject === 'object') {
      var defaultFields = {};

      if (this.defaultFields && this.defaultFields[modelName]) {
        var modelFields = this.defaultFields[modelName];
        defaultFields = typeof modelFields === 'function' ? modelFields(selectObject.select) : modelFields;
      }

      var filteredObject = _extends({}, selectObject, {
        select: _extends({}, defaultFields)
      });

      Object.keys(selectObject.select).forEach(function (key) {
        if (_this.allowedProps.includes(key)) {
          filteredObject.select[key] = selectObject.select[key];
        } else {
          var field = _this.field(key, model);

          if (field) {
            if (field.kind !== 'object') {
              filteredObject.select[key] = true;
            } else {
              var subModelFilter = _this.filterBy(field.type, selectObject.select[key]);

              if (subModelFilter === true) {
                filteredObject.select[key] = true;
              } else if (Object.keys(subModelFilter.select).length > 0) {
                filteredObject.select[key] = subModelFilter;
              }
            }
          }
        }
      });
      return filteredObject;
    } else {
      return selectObject;
    }
  };

  _proto.getSelect = function getSelect(fields) {
    var _this2 = this;

    var selectObject = this.isAggregate ? {} : {
      select: {}
    };
    Object.keys(fields).forEach(function (key) {
      if (Object.keys(fields[key]).length === 0) {
        if (_this2.isAggregate) {
          selectObject[key] = true;
        } else {
          selectObject.select[key] = true;
        }
      } else if (key === '__arguments') {
        fields[key].forEach(function (arg) {
          Object.keys(arg).forEach(function (key2) {
            if (_this2.availableArgs.includes(key2)) {
              selectObject[key2] = arg[key2].value;
            }
          });
        });
      } else {
        if (_this2.isAggregate) {
          selectObject[key] = _this2.getSelect(fields[key]);
        } else {
          selectObject.select[key] = _this2.getSelect(fields[key]);
        }
      }
    });
    return selectObject;
  };

  _createClass(PrismaSelect, [{
    key: "value",
    get: function get() {
      var returnType = this.info.returnType.toString().replace(/]/g, '').replace(/\[/g, '').replace(/!/g, '');
      this.isAggregate = returnType.includes('Aggregate');
      return this.valueWithFilter(returnType);
    }
  }, {
    key: "dataModel",
    get: function get() {
      var _this$options;

      var models = [];

      if ((_this$options = this.options) != null && _this$options.dmmf) {
        var _this$options2;

        (_this$options2 = this.options) == null ? void 0 : _this$options2.dmmf.forEach(function (doc) {
          models.push.apply(models, doc.datamodel.models);
        });
      } else {
        var _require = require('@prisma/client'),
            Prisma = _require.Prisma;

        if (Prisma.dmmf && Prisma.dmmf.datamodel) {
          models.push.apply(models, Prisma.dmmf.datamodel.models);
        }
      }

      return models;
    }
  }, {
    key: "defaultFields",
    get: function get() {
      var _this$options3;

      return (_this$options3 = this.options) == null ? void 0 : _this$options3.defaultFields;
    }
  }, {
    key: "fields",
    get: function get() {
      return graphqlFields(this.info, {}, {
        excludedFields: ['__typename'],
        processArguments: true
      });
    }
  }]);

  return PrismaSelect;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
});

/**
 * Handle all relation onDelete type
 * @param prisma - optional arg you can send your client class.
 * @param options - optional arg you can send your custom options { dmmf?: DMMF.Document }.
 * @example
 * const prisma = new PrismaClient({log: ['query']});
 * const prismaDelete = new PrismaDelete(prisma);
 *
 * // or new PrismaDelete(); we will create new client and use
 *
 * // use onDelete method
 * prismaDelete.onDelete({
 *  model: 'User',
 *  where: { id: 1 },
 *  deleteParent: true // if true will also delete user record default false
 * });
 *
 **/
var PrismaDelete = /*#__PURE__*/function () {
  function PrismaDelete(prisma, options) {
    this.prisma = prisma;
    this.options = options;
  }

  var _proto = PrismaDelete.prototype;

  _proto.getModel = function getModel(modelName) {
    var _this$dataModel;

    return (_this$dataModel = this.dataModel) == null ? void 0 : _this$dataModel.models.find(function (item) {
      return item.name === modelName;
    });
  };

  PrismaDelete.getModelName = function getModelName(modelName) {
    return modelName.charAt(0).toLowerCase() + modelName.slice(1);
  };

  _proto.getFieldByType = function getFieldByType(modelName, fieldType) {
    var _this$getModel;

    return (_this$getModel = this.getModel(modelName)) == null ? void 0 : _this$getModel.fields.find(function (item) {
      return item.type === fieldType && !item.isList;
    });
  };

  _proto.getModelIdFieldName = function getModelIdFieldName(modelName) {
    var _this$getModel2, _this$getModel2$field;

    return (_this$getModel2 = this.getModel(modelName)) == null ? void 0 : (_this$getModel2$field = _this$getModel2.fields.find(function (item) {
      return item.isId;
    })) == null ? void 0 : _this$getModel2$field.name;
  };

  _proto.getOnDeleteFields = function getOnDeleteFields(modelName, type) {
    var _this$getModel3;

    return (_this$getModel3 = this.getModel(modelName)) == null ? void 0 : _this$getModel3.fields.filter(function (item) {
      var _item$documentation, _item$documentation2;

      return ((_item$documentation = item.documentation) == null ? void 0 : _item$documentation.includes('@onDelete')) && ((_item$documentation2 = item.documentation) == null ? void 0 : _item$documentation2.includes(type));
    });
  };

  _proto.setFieldNull = /*#__PURE__*/function () {
    var _setFieldNull = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(modelName, field, where) {
      var name, modelId, fieldModelId, _select, _ref, _extends2, fieldSelect, results, _iterator, _step, result, _where, _data;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              name = PrismaDelete.getModelName(modelName);
              modelId = this.getModelIdFieldName(modelName);
              fieldModelId = this.getModelIdFieldName(field.type);

              if (!(modelId && fieldModelId && !field.isRequired)) {
                _context.next = 16;
                break;
              }

              fieldSelect = field.isList ? (_ref = {}, _ref[field.name] = {
                select: (_select = {}, _select[fieldModelId] = true, _select)
              }, _ref) : {};
              _context.next = 7;
              return this.prisma[name].findMany({
                where: where,
                select: _extends((_extends2 = {}, _extends2[modelId] = true, _extends2), fieldSelect)
              });

            case 7:
              results = _context.sent;
              _iterator = _createForOfIteratorHelperLoose(results);

            case 9:
              if ((_step = _iterator()).done) {
                _context.next = 16;
                break;
              }

              result = _step.value;

              if (field.isList && result[field.name].length === 0) {
                _context.next = 14;
                break;
              }

              _context.next = 14;
              return this.prisma[name].update({
                where: (_where = {}, _where[modelId] = result[modelId], _where),
                data: (_data = {}, _data[field.name] = {
                  disconnect: field.isList ? result[field.name] : true
                }, _data)
              });

            case 14:
              _context.next = 9;
              break;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function setFieldNull(_x, _x2, _x3) {
      return _setFieldNull.apply(this, arguments);
    }

    return setFieldNull;
  }();

  _proto.getDeleteArray = /*#__PURE__*/function () {
    var _getDeleteArray = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(modelName, whereInput, includeParent) {
      var deleteArray, nullFields, _iterator2, _step2, nullField, cascadeFields, _iterator3, _step3, cascadeField, childField, _this$getDeleteArray, _where2;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (includeParent === void 0) {
                includeParent = true;
              }

              deleteArray = includeParent ? [{
                name: PrismaDelete.getModelName(modelName),
                where: whereInput
              }] : [];
              nullFields = this.getOnDeleteFields(modelName, 'SET_NULL');

              if (!nullFields) {
                _context2.next = 11;
                break;
              }

              _iterator2 = _createForOfIteratorHelperLoose(nullFields);

            case 5:
              if ((_step2 = _iterator2()).done) {
                _context2.next = 11;
                break;
              }

              nullField = _step2.value;
              _context2.next = 9;
              return this.setFieldNull(modelName, nullField, whereInput);

            case 9:
              _context2.next = 5;
              break;

            case 11:
              cascadeFields = this.getOnDeleteFields(modelName, 'CASCADE');

              if (!cascadeFields) {
                _context2.next = 30;
                break;
              }

              _iterator3 = _createForOfIteratorHelperLoose(cascadeFields);

            case 14:
              if ((_step3 = _iterator3()).done) {
                _context2.next = 30;
                break;
              }

              cascadeField = _step3.value;
              childField = this.getFieldByType(cascadeField.type, modelName);

              if (!childField) {
                _context2.next = 28;
                break;
              }

              if (!(cascadeField.type !== modelName)) {
                _context2.next = 27;
                break;
              }

              _context2.t0 = deleteArray.push;
              _context2.t1 = deleteArray;
              _context2.next = 23;
              return this.getDeleteArray(cascadeField.type, (_this$getDeleteArray = {}, _this$getDeleteArray[childField.name] = whereInput, _this$getDeleteArray));

            case 23:
              _context2.t2 = _context2.sent;

              _context2.t0.apply.call(_context2.t0, _context2.t1, _context2.t2);

              _context2.next = 28;
              break;

            case 27:
              deleteArray.push({
                name: PrismaDelete.getModelName(modelName),
                where: (_where2 = {}, _where2[childField.name] = whereInput, _where2)
              });

            case 28:
              _context2.next = 14;
              break;

            case 30:
              return _context2.abrupt("return", deleteArray);

            case 31:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getDeleteArray(_x4, _x5, _x6) {
      return _getDeleteArray.apply(this, arguments);
    }

    return getDeleteArray;
  }()
  /**
   * Handle all relation onDelete type
   * @param onDeleteArgs - Object with model data.
   * @return count of deleted records if deleteParent is true
   * @example
   * const prismaDelete = new PrismaDelete();
   * prismaDelete.onDelete({
   *  model: 'User',
   *  where: { id: 1 },
   *  deleteParent: true // if true will also delete user record default false
   * });
   *
   **/
  ;

  _proto.onDelete =
  /*#__PURE__*/
  function () {
    var _onDelete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_ref2) {
      var model, where, deleteParent, results, i;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              model = _ref2.model, where = _ref2.where, deleteParent = _ref2.deleteParent;
              _context3.next = 3;
              return this.getDeleteArray(model, where, !!deleteParent);

            case 3:
              results = _context3.sent.reverse();
              i = 0;

            case 5:
              if (!(i < results.length)) {
                _context3.next = 17;
                break;
              }

              if (!(i + 1 === results.length && deleteParent)) {
                _context3.next = 12;
                break;
              }

              _context3.next = 9;
              return this.prisma[results[i].name].deleteMany({
                where: results[i].where
              });

            case 9:
              return _context3.abrupt("return", _context3.sent);

            case 12:
              _context3.next = 14;
              return this.prisma[results[i].name].deleteMany({
                where: results[i].where
              });

            case 14:
              ++i;
              _context3.next = 5;
              break;

            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function onDelete(_x7) {
      return _onDelete.apply(this, arguments);
    }

    return onDelete;
  }();

  _createClass(PrismaDelete, [{
    key: "getDMMF",
    get: function get() {
      var _require = require('@prisma/client'),
          Prisma = _require.Prisma;

      return Prisma.dmmf;
    }
  }, {
    key: "dataModel",
    get: function get() {
      var _this$options;

      if ((_this$options = this.options) != null && _this$options.dmmf) {
        var _this$options2, _this$options2$dmmf;

        return (_this$options2 = this.options) == null ? void 0 : (_this$options2$dmmf = _this$options2.dmmf) == null ? void 0 : _this$options2$dmmf.datamodel;
      } else {
        var _this$getDMMF;

        return (_this$getDMMF = this.getDMMF) == null ? void 0 : _this$getDMMF.datamodel;
      }
    }
  }]);

  return PrismaDelete;
}();

var _templateObject;
var testedTypes = [];
var hasEmptyTypeFields = function hasEmptyTypeFields(type, options) {
  var _options$dmmf, _schema, _schema2;

  var schema = options == null ? void 0 : (_options$dmmf = options.dmmf) == null ? void 0 : _options$dmmf.schema;

  if (!schema) {
    var _Prisma$dmmf;

    var _require = require('@prisma/client'),
        Prisma = _require.Prisma;

    schema = (_Prisma$dmmf = Prisma.dmmf) == null ? void 0 : _Prisma$dmmf.schema;
  }

  testedTypes.push(type);
  var inputObjectTypes = schema ? [].concat((_schema = schema) == null ? void 0 : _schema.inputObjectTypes.prisma) : [];
  if ((_schema2 = schema) != null && _schema2.inputObjectTypes.model) inputObjectTypes.push.apply(inputObjectTypes, schema.inputObjectTypes.model);
  var inputType = inputObjectTypes.find(function (item) {
    return item.name === type;
  });

  if (inputType) {
    if (inputType.fields.length === 0) return true;

    for (var _iterator = _createForOfIteratorHelperLoose(inputType.fields), _step; !(_step = _iterator()).done;) {
      var field = _step.value;
      var fieldType = getInputType(field, options);

      if (fieldType.type !== type && fieldType.location === 'inputObjectTypes' && !testedTypes.includes(fieldType.type)) {
        var state = hasEmptyTypeFields(fieldType.type, options);
        if (state) return true;
      }
    }
  }

  return false;
};
var getInputType = function getInputType(field, options) {
  var index = 0;

  if (options != null && options.doNotUseFieldUpdateOperationsInput && field.inputTypes.length > 1 && field.inputTypes[1].type.endsWith('FieldUpdateOperationsInput')) {
    return field.inputTypes[index];
  }

  if (field.inputTypes.length > 1 && (field.inputTypes[1].location === 'inputObjectTypes' || field.inputTypes[1].isList || field.inputTypes[1].type === 'Json')) {
    index = 1;
  }

  return field.inputTypes[index];
};
function generateInputsString(options) {
  var _options$dmmf2;

  var schema = options == null ? void 0 : (_options$dmmf2 = options.dmmf) == null ? void 0 : _options$dmmf2.schema;

  if (!schema) {
    var _Prisma$dmmf2;

    var _require2 = require('@prisma/client'),
        Prisma = _require2.Prisma;

    schema = (_Prisma$dmmf2 = Prisma.dmmf) == null ? void 0 : _Prisma$dmmf2.schema;
  }

  var fileContent = "\n  scalar DateTime\n  \n  type BatchPayload {\n  count: Int!\n}\n";

  if (schema) {
    var _schema3;

    var enums = [].concat(schema.enumTypes.prisma);
    if (schema.enumTypes.model) enums.push.apply(enums, schema.enumTypes.model);
    enums.forEach(function (item) {
      fileContent += "enum " + item.name + " {";
      item.values.forEach(function (item2) {
        fileContent += "\n        " + item2;
      });
      fileContent += "}\n  \n  ";
    });
    var inputObjectTypes = [].concat(schema.inputObjectTypes.prisma);
    if (schema.inputObjectTypes.model) inputObjectTypes.push.apply(inputObjectTypes, schema.inputObjectTypes.model);
    inputObjectTypes.forEach(function (input) {
      if (input.fields.length > 0) {
        fileContent += "input " + input.name + " {\n      ";
        var inputFields = typeof (options == null ? void 0 : options.filterInputs) === 'function' ? options.filterInputs(input) : input.fields;
        inputFields.filter(function (field) {
          var _options$excludeField;

          return !(options != null && (_options$excludeField = options.excludeFields) != null && _options$excludeField.includes(field.name));
        }).forEach(function (field) {
          var inputType = getInputType(field, options);
          var hasEmptyType = inputType.location === 'inputObjectTypes' && hasEmptyTypeFields(inputType.type, options);

          if (!hasEmptyType) {
            fileContent += field.name + ": " + (inputType.isList ? "[" + inputType.type + "!]" : inputType.type) + (field.isRequired ? '!' : '') + "\n        ";
          }
        });
        fileContent += "}\n    \n  ";
      }
    });
    (_schema3 = schema) == null ? void 0 : _schema3.outputObjectTypes.prisma.filter(function (type) {
      return type.name.includes('Aggregate') || type.name.endsWith('CountOutputType');
    }).forEach(function (type) {
      fileContent += "type " + type.name + " {\n      ";
      type.fields.filter(function (field) {
        var _options$excludeField2;

        return !(options != null && (_options$excludeField2 = options.excludeFields) != null && _options$excludeField2.includes(field.name));
      }).forEach(function (field) {
        fileContent += field.name + ": " + (field.outputType.isList ? "[" + field.outputType.type + "!]" : field.outputType.type) + (!field.isNullable ? '!' : '') + "\n        ";
      });
      fileContent += "}\n    \n  ";
    });
  }

  return fileContent;
}
var sdlInputs = function sdlInputs(options) {
  var gql = require('graphql-tag');

  return gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n    ", "\n  "])), generateInputsString(options));
};
var generateGraphQlSDLFile = function generateGraphQlSDLFile(schema, path) {
  if (path === void 0) {
    path = 'schema.graphql';
  }

  var _require3 = require('graphql'),
      printSchema = _require3.printSchema;

  writeFileSync(path, printSchema(schema));
};

export { PrismaDelete, PrismaSelect, generateGraphQlSDLFile, generateInputsString, getInputType, hasEmptyTypeFields, sdlInputs };
//# sourceMappingURL=plugins.esm.js.map
